// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_exact
Rcpp::NumericMatrix cpp_exact(bool real_hist, bool l2, Rcpp::NumericVector x, int len, double k, double eps);
RcppExport SEXP _histogramr_cpp_exact(SEXP real_histSEXP, SEXP l2SEXP, SEXP xSEXP, SEXP lenSEXP, SEXP kSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type real_hist(real_histSEXP);
    Rcpp::traits::input_parameter< bool >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_exact(real_hist, l2, x, len, k, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_greedy
Rcpp::NumericVector cpp_greedy(bool real_hist, bool l2, Rcpp::NumericVector x, int len, double k, int modulator, Rcpp::NumericVector init, double eps);
RcppExport SEXP _histogramr_cpp_greedy(SEXP real_histSEXP, SEXP l2SEXP, SEXP xSEXP, SEXP lenSEXP, SEXP kSEXP, SEXP modulatorSEXP, SEXP initSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type real_hist(real_histSEXP);
    Rcpp::traits::input_parameter< bool >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type modulator(modulatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_greedy(real_hist, l2, x, len, k, modulator, init, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_histogramr_cpp_exact", (DL_FUNC) &_histogramr_cpp_exact, 6},
    {"_histogramr_cpp_greedy", (DL_FUNC) &_histogramr_cpp_greedy, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_histogramr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
